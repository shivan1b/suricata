use nom::{IResult, be_u8, be_u16, be_u32};
use nom;
use crate::dcerpc::dcerpc::*;


named!(pub parse_uuid<Uuid>,
    do_parse!(
        time_low: take!(4) >>
        time_mid: take!(2) >>
        time_hi_and_version: take!(2) >>
        clock_seq_hi_and_reserved: be_u8 >>
        clock_seq_low: be_u8 >>
        node: take!(6) >>
        (
            Uuid {
                time_low: time_low.to_vec(),
                time_mid: time_mid.to_vec(),
                time_hi_and_version: time_hi_and_version.to_vec(),
                clock_seq_hi_and_reserved: clock_seq_hi_and_reserved,
                clock_seq_low: clock_seq_low,
                node: node.to_vec(),
            }
            )
        )
    );

fn assemble_uuid(uuid: Uuid) -> Vec<u8>
{
    let mut uuidtmp = uuid;
    let mut vect: Vec<u8> = Vec::new();
    uuidtmp.time_low.reverse();
    uuidtmp.time_mid.reverse();
    uuidtmp.time_hi_and_version.reverse();
    vect.append(&mut uuidtmp.time_low);
    vect.append(&mut uuidtmp.time_mid);
    vect.append(&mut uuidtmp.time_hi_and_version);
    vect.push(uuidtmp.clock_seq_hi_and_reserved);
    vect.push(uuidtmp.clock_seq_low);
    vect.append(&mut uuidtmp.node);

    vect
}

named!(pub dcerpc_parse_header<DCERPCHdrUdp>,
       do_parse!(
           rpc_vers: be_u8 >>
           pkt_type: be_u8 >>
           flags1: be_u8 >>
           flags2: be_u8 >>
           drep: take!(3) >>
           serial_hi: be_u8 >>
           objectuuid: take!(16) >>
           interfaceuuid: take!(16) >>
           activityuuid: take!(16) >>
           server_boot_vec: take!(4) >>
           if_vers_vec: take!(4) >>
           seqnum_vec: take!(4) >>
           opnum_vec: take!(2) >>
           ihint_vec: take!(2) >>
           ahint_vec: take!(2) >>
           fraglen_vec: take!(2) >>
           fragnum_vec: take!(2) >>
           auth_proto: be_u8 >>
           serial_lo: be_u8 >>
           (
               DCERPCHdrUdp {
                   rpc_vers: rpc_vers,
                   pkt_type: pkt_type,
                   flags1: flags1,
                   flags2: flags2,
                   drep: drep.to_vec(),
                   serial_hi: serial_hi,
                   objectuuid: match parse_uuid(objectuuid) {
                       Ok((_, vect)) => assemble_uuid(vect),
                       Err(e) => {
                           println!("{}", e);
                           vec![0]
                       },
                   },
                   interfaceuuid: match parse_uuid(interfaceuuid) {
                       Ok((_, vect)) => assemble_uuid(vect),
                       Err(e) => {
                           println!("{}", e);
                           vec![0]
                       },
                   },
                   activityuuid: match parse_uuid(activityuuid){
                       Ok((_, vect)) => assemble_uuid(vect),
                       Err(e) => {
                           println!("{}", e);
                           vec![0]
                       },
                   },
                   server_boot: match drep[0] {
                       0x10 => {
                           let server_boot_vec = server_boot_vec.to_vec();
                           let mut server_boot: u32 = server_boot_vec[0] as u32;
                           server_boot |= (server_boot_vec[1] as u32) << 8;
                           server_boot |= (server_boot_vec[2] as u32) << 16;
                           server_boot |= (server_boot_vec[3] as u32) << 24;
                           server_boot
                       },
                       _ => {
                           let server_boot_vec = server_boot_vec.to_vec();
                           let mut server_boot: u32 = (server_boot_vec[0] as u32) << 24;
                           server_boot |= (server_boot_vec[1] as u32) << 16;
                           server_boot |= (server_boot_vec[2] as u32) << 8;
                           server_boot |= server_boot_vec[3] as u32;
                           server_boot
                       }
                   },
                   if_vers: match drep[0] {
                       0x10 => {
                           let if_vers_vec = if_vers_vec.to_vec();
                           let mut if_vers: u32 = if_vers_vec[0] as u32;
                           if_vers |= (if_vers_vec[1] as u32) << 8;
                           if_vers |= (if_vers_vec[2] as u32) << 16;
                           if_vers |= (if_vers_vec[3] as u32) << 24;
                           if_vers
                       },
                       _ => {
                           let if_vers_vec = if_vers_vec.to_vec();
                           let mut if_vers = (if_vers_vec[0] as u32) << 24;
                           if_vers |= (if_vers_vec[1] as u32) << 16;
                           if_vers |= (if_vers_vec[2] as u32) << 8;
                           if_vers |= if_vers_vec[3] as u32;
                           if_vers
                       }
                   },
                   seqnum: match drep[0] {
                       0x10 => {
                           let seqnum_vec = seqnum_vec.to_vec();
                           let mut seqnum: u32 = seqnum_vec[0] as u32;
                           seqnum |= (seqnum_vec[1] as u32) << 8;
                           seqnum |= (seqnum_vec[2] as u32) << 16;
                           seqnum |= (seqnum_vec[3] as u32) << 24;
                           seqnum
                       },
                       _ => {
                           let seqnum_vec = seqnum_vec.to_vec();
                           let mut seqnum: u32 = (seqnum_vec[0] as u32) << 24;
                           seqnum |= (seqnum_vec[1] as u32) << 16;
                           seqnum |= (seqnum_vec[2] as u32) << 8;
                           seqnum |= seqnum_vec[3] as u32;
                           seqnum
                       }
                   },
                   opnum: match drep[0] {
                       0x10 => {
                           let opnum_vec = opnum_vec.to_vec();
                           let mut opnum: u16 = opnum_vec[0] as u16;
                           opnum |= (opnum_vec[1] as u16) << 8;
                           opnum
                       },
                       _ => {
                           let opnum_vec = opnum_vec.to_vec();
                           let mut opnum: u16 = (opnum_vec[0] as u16) << 8;
                           opnum |= opnum_vec[1] as u16;
                           opnum
                       }
                   },
                   ihint: match drep[0] {
                       0x10 => {
                           let ihint_vec = ihint_vec.to_vec();
                           let mut ihint: u16 = ihint_vec[0] as u16;
                           ihint |= (ihint_vec[1] as u16) << 8;
                           ihint
                       },
                       _ => {
                           let ihint_vec = ihint_vec.to_vec();
                           let mut ihint: u16 = (ihint_vec[0] as u16) << 8;
                           ihint |= ihint_vec[1] as u16;
                           ihint
                       }
                   },
                   ahint: match drep[0] {
                        0x10 => {
                           let ahint_vec = ahint_vec.to_vec();
                           let mut ahint: u16 = ahint_vec[0] as u16;
                           ahint |= (ahint_vec[1] as u16) << 8;
                           ahint
                       },
                       _ => {
                           let ahint_vec = ahint_vec.to_vec();
                           let mut ahint: u16 = (ahint_vec[0] as u16) << 8;
                           ahint |= ahint_vec[1] as u16;
                           ahint
                       }
                   },
                   fraglen: match drep[0] {
                         0x10 => {
                           let fraglen_vec = fraglen_vec.to_vec();
                           let mut fraglen: u16 = fraglen_vec[0] as u16;
                           fraglen |= (fraglen_vec[1] as u16) << 8;
                           fraglen
                       },
                       _ => {
                           let fraglen_vec = fraglen_vec.to_vec();
                           let mut fraglen: u16 = (fraglen_vec[0] as u16) << 8;
                           fraglen |= fraglen_vec[1] as u16;
                           fraglen
                       }
                   },
                   fragnum: match drep[0] {
                        0x10 => {
                           let fragnum_vec = fragnum_vec.to_vec();
                           let mut fragnum: u16 = fragnum_vec[0] as u16;
                           fragnum |= (fragnum_vec[1] as u16) << 8;
                           fragnum
                       },
                       _ => {
                           let fragnum_vec = fragnum_vec.to_vec();
                           let mut fragnum: u16 = (fragnum_vec[0] as u16) << 8;
                           fragnum |= fragnum_vec[1] as u16;
                           fragnum
                       }
                   },
                   auth_proto: auth_proto,
                   serial_lo: serial_lo,
               }
               )
           )
   );

#[cfg(test)]
mod tests {

    #[test]
    fn test_dcerpc_udp_header_parsing() {
        let dcerpcrequest: &[u8] = &[
            0x04, 0x00, 0x2c, 0x00, 0x10, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xa0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46,
            0x3f, 0x98, 0xf0, 0x5c, 0xd9, 0x63, 0xcc, 0x46,
            0xc2, 0x74, 0x51, 0x6c, 0x8a, 0x53, 0x7d, 0x6f,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0xff, 0xff,
            0xff, 0xff, 0x70, 0x05, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x32, 0x24, 0x58, 0xfd,
            0xcc, 0x45, 0x64, 0x49, 0xb0, 0x70, 0xdd, 0xae,
            0x74, 0x2c, 0x96, 0xd2, 0x60, 0x5e, 0x0d, 0x00,
            0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x70, 0x5e, 0x0d, 0x00, 0x02, 0x00, 0x00, 0x00,
            0x7c, 0x5e, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x10, 0x00, 0x00, 0x00, 0x80, 0x96, 0xf1, 0xf1,
            0x2a, 0x4d, 0xce, 0x11, 0xa6, 0x6a, 0x00, 0x20,
            0xaf, 0x6e, 0x72, 0xf4, 0x0c, 0x00, 0x00, 0x00,
            0x4d, 0x41, 0x52, 0x42, 0x01, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x0d, 0xf0, 0xad, 0xba,
            0x00, 0x00, 0x00, 0x00, 0xa8, 0xf4, 0x0b, 0x00,
            0x10, 0x09, 0x00, 0x00, 0x10, 0x09, 0x00, 0x00,
            0x4d, 0x45, 0x4f, 0x57, 0x04, 0x00, 0x00, 0x00,
            0xa2, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46,
            0x38, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46,
            0x00, 0x00, 0x00, 0x00, 0xe0, 0x08, 0x00, 0x00,
            0xd8, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x01, 0x10, 0x08, 0x00, 0xcc, 0xcc, 0xcc, 0xcc,
            0xc8, 0x00, 0x00, 0x00, 0x4d, 0x45, 0x4f, 0x57,
            0xd8, 0x08, 0x00, 0x00, 0xd8, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
            0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0xc4, 0x28, 0xcd, 0x00,
            0x64, 0x29, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x07, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x46, 0xab, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x46, 0xa5, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x46, 0xa6, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x46, 0xa4, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x46, 0xad, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x46, 0xaa, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x46, 0x07, 0x00, 0x00, 0x00,
            0x60, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00,
            0x90, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
            0x20, 0x00, 0x00, 0x00, 0x28, 0x06, 0x00, 0x00,
            0x30, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
            0x01, 0x10, 0x08, 0x00, 0xcc, 0xcc, 0xcc, 0xcc,
            0x50, 0x00, 0x00, 0x00, 0x4f, 0xb6, 0x88, 0x20,
            0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x01, 0x10, 0x08, 0x00, 0xcc, 0xcc, 0xcc, 0xcc,
            0x48, 0x00, 0x00, 0x00, 0x07, 0x00, 0x66, 0x00,
            0x06, 0x09, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46,
            0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x78, 0x19, 0x0c, 0x00,
            0x58, 0x00, 0x00, 0x00, 0x05, 0x00, 0x06, 0x00,
            0x01, 0x00, 0x00, 0x00, 0x70, 0xd8, 0x98, 0x93,
            0x98, 0x4f, 0xd2, 0x11, 0xa9, 0x3d, 0xbe, 0x57,
            0xb2, 0x00, 0x00, 0x00, 0x32, 0x00, 0x31, 0x00,
            0x01, 0x10, 0x08, 0x00, 0xcc, 0xcc, 0xcc, 0xcc,
            0x80, 0x00, 0x00, 0x00, 0x0d, 0xf0, 0xad, 0xba,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x18, 0x43, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
            0x4d, 0x45, 0x4f, 0x57, 0x04, 0x00, 0x00, 0x00,
            0xc0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46,
            0x3b, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46,
            0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x01, 0x00, 0x81, 0xc5, 0x17, 0x03,
            0x80, 0x0e, 0xe9, 0x4a, 0x99, 0x99, 0xf1, 0x8a,
            0x50, 0x6f, 0x7a, 0x85, 0x02, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
            0x01, 0x10, 0x08, 0x00, 0xcc, 0xcc, 0xcc, 0xcc,
            0x30, 0x00, 0x00, 0x00, 0x78, 0x00, 0x6e, 0x00,
            0x00, 0x00, 0x00, 0x00, 0xd8, 0xda, 0x0d, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x20, 0x2f, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
            0x46, 0x00, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x01, 0x10, 0x08, 0x00, 0xcc, 0xcc, 0xcc, 0xcc,
            0x10, 0x00, 0x00, 0x00, 0x30, 0x00, 0x2e, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x01, 0x10, 0x08, 0x00, 0xcc, 0xcc, 0xcc, 0xcc,
            0x68, 0x00, 0x00, 0x00, 0x0e, 0x00, 0xff, 0xff,
            0x68, 0x8b, 0x0b, 0x00, 0x02, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xfe, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xfe, 0x02, 0x00, 0x00, 0x5c, 0x00, 0x5c, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x9d, 0x13, 0x00, 0x01,
            0xcc, 0xe0, 0xfd, 0x7f, 0xcc, 0xe0, 0xfd, 0x7f,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
        ];

    }
}
